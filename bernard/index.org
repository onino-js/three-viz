<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Simulation de Convection de Rayleigh-Bénard</title>
    <!-- Tailwind CSS pour un style de base et responsif -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap");
      body {
        font-family: "Inter", sans-serif;
        background-color: #f0f0f0; /* Fond clair */
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        margin: 0;
        padding: 20px;
        box-sizing: border-box;
        overflow: hidden; /* Empêche le défilement si le canvas est plus grand */
      }
      .container {
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 900px; /* Largeur maximale pour le contenu */
        width: 100%;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
      }
      canvas {
        display: block;
        width: 100%; /* Le canvas prend toute la largeur disponible du conteneur */
        max-width: 800px; /* Limite la taille maximale du canvas */
        height: auto; /* Maintient le ratio d'aspect */
        aspect-ratio: 1 / 1; /* Assure que le canvas est carré */
        background-color: #000; /* Fond noir pour la simulation */
        border-radius: 8px;
        box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.2);
      }
      h1 {
        color: #333;
        font-size: 1.8rem;
        margin-bottom: 10px;
      }
      p {
        color: #666;
        font-size: 0.95rem;
        line-height: 1.5;
      }
      .error-message {
        color: #d32f2f;
        background-color: #ffebee;
        border: 1px solid #ef9a9a;
        padding: 10px 15px;
        border-radius: 6px;
        margin-top: 15px;
        font-weight: bold;
      }
      .controls {
        margin-top: 15px;
      }
      .controls button {
        cursor: pointer;
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        font-weight: bold;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #4caf50; /* Green */
        color: white;
        margin: 5px;
      }
      .controls button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
      }
      #showTempBtn {
        background-color: #3b82f6; /* Blue */
      }
      #showTempBtn:hover {
        background-color: #2563eb;
      }
      #showSpeedBtn {
        background-color: #10b981; /* Green */
      }
      #showSpeedBtn:hover {
        background-color: #059669;
      }
      @media (max-width: 640px) {
        h1 {
          font-size: 1.5rem;
        }
        .container {
          padding: 15px;
        }
        .controls button {
          padding: 8px 15px;
          font-size: 0.9rem;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>Simulation de Convection de Rayleigh-Bénard</h1>
      <p>
        Cette simulation WebGL modélise le phénomène de convection de
        Rayleigh-Bénard, où un fluide chauffé par le bas et refroidi par le haut
        développe des motifs de mouvement distincts. Les couleurs chaudes
        (rouge) représentent des températures élevées, et les couleurs froides
        (bleu) représentent des températures basses.
        <br />
        <span class="font-bold"
          >Remarque : Cliquez sur l'image en partie basse pour ajouter un point
          chaud et enclancher les phénomènes thermo-convectifs</span
        >
      </p>
      <canvas id="glcanvas"></canvas>
      <div class="controls flex flex-wrap justify-center gap-4 mt-4">
        <button id="showTempBtn">Visualiser Température</button>
        <button id="showSpeedBtn">Visualiser Vitesse</button>
      </div>
      <div id="statusMessage" class="error-message hidden"></div>
    </div>

    <script>
      // =================================================================================
      // main.js - Simulation de Convection de Rayleigh-Bénard en WebGL
      // =================================================================================

      "use strict";

      // --- Configuration de la simulation ---
      const config = {
        // Résolution de la grille de simulation. Plus c'est élevé, plus c'est précis mais lent.
        SIM_RESOLUTION: 512,
        // Nombre d'itérations pour résoudre le champ de pression. Crucial pour la stabilité.
        PRESSURE_ITERATIONS: 30,
        // Pas de temps. Une valeur trop élevée rendra la simulation instable.
        DT: 0.0005,
        // Viscosité du fluide (non utilisée directement dans les shaders fournis, mais importante pour la physique)
        VISCOSITY: 0.001,
        // Coefficient de dilatation thermique (force de la poussée d'Archimède)
        ALPHA: 50,
        // Coefficient de diffusion thermique. Crucial pour la dissipation de la chaleur.
        DIFFUSION_TEMP: 0.001, // Nouvelle valeur pour la diffusion thermique
        // Température initiale du bas de la grille
        INITIAL_TEMP_BOTTOM: 1.0,
        // Température initiale du haut de la grille
        INITIAL_TEMP_TOP: 0.0,
      };

      // Variable globale pour le mode de visualisation (0: température, 1: vitesse)
      let currentVisualizationMode = 0;
      // Variable globale pour stocker la demande de clic
      let clickRequest = null;

      // --- Shaders GLSL ---

      const vertexShaderSource = `
            attribute vec2 a_position;
            varying vec2 v_texCoord;
            void main() {
                // Coordonnées de texture de 0.0 à 1.0
                v_texCoord = a_position * 0.5 + 0.5;
                // Position du clipspace de -1.0 à 1.0
                gl_Position = vec4(a_position, 0.0, 1.0);
            }
        `;

      // Shader pour déplacer une quantité (vitesse, température) avec le champ de vitesse
      const advectionShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_velocity;
            uniform sampler2D u_source;
            uniform vec2 u_texelSize;
            uniform float u_dt;
            uniform float u_simResolution; // Uniforme pour la résolution de la simulation

            void main() {
                // Calcule la position précédente en remontant le temps avec la vitesse.
                // u_simResolution est utilisé pour corriger l'échelle de la vitesse.
                vec2 pos = v_texCoord - u_dt * texture2D(u_velocity, v_texCoord).xy * u_texelSize * u_simResolution;
                gl_FragColor = texture2D(u_source, pos);
            }
        `;

      // Shader pour appliquer la force de flottabilité (poussée d'Archimède)
      const buoyancyShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_velocity;
            uniform sampler2D u_temperature;
            uniform float u_dt;
            uniform float u_alpha;

            void main() {
                float temp = texture2D(u_temperature, v_texCoord).r;
                vec2 vel = texture2D(u_velocity, v_texCoord).xy;

                // La force de flottabilité est appliquée sur l'axe Y, proportionnelle à la température
                // et au coefficient de dilatation thermique (alpha).
                vel.y += u_alpha * temp * u_dt;
                
                gl_FragColor = vec4(vel, 0.0, 1.0);
            }
        `;

      // Shader pour calculer la divergence du champ de vitesse
      const divergenceShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_velocity;
            uniform vec2 u_texelSize;

            void main() {
                // Échantillonne les vitesses des texels voisins pour calculer la divergence
                // Divergence = dVx/dx + dVy/dy
                float L = texture2D(u_velocity, v_texCoord - vec2(u_texelSize.x, 0.0)).x;
                float R = texture2D(u_velocity, v_texCoord + vec2(u_texelSize.x, 0.0)).x;
                float B = texture2D(u_velocity, v_texCoord - vec2(0.0, u_texelSize.y)).y;
                float T = texture2D(u_velocity, v_texCoord + vec2(0.0, u_texelSize.y)).y;

                // Calcule la divergence, multipliée par 0.5 car la différence est sur 2 texels
                gl_FragColor = vec4(0.5 * (R - L + T - B), 0.0, 0.0, 1.0);
            }
        `;

      // Shader pour résoudre l'équation de Poisson pour la pression (méthode de Jacobi)
      const pressureShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_pressure;
            uniform sampler2D u_divergence;
            uniform vec2 u_texelSize; // Texel size est utilisé pour la discrétisation spatiale

            void main() {
                // Échantillonne les pressions des texels voisins
                float L = texture2D(u_pressure, v_texCoord - vec2(u_texelSize.x, 0.0)).r;
                float R = texture2D(u_pressure, v_texCoord + vec2(u_texelSize.x, 0.0)).r;
                float B = texture2D(u_pressure, v_texCoord - vec2(0.0, u_texelSize.y)).r;
                float T = texture2D(u_pressure, v_texCoord + vec2(0.0, u_texelSize.y)).r;
                float div = texture2D(u_divergence, v_texCoord).r;

                // Itération de Jacobi pour la résolution de l'équation de Poisson
                // P_new = 0.25 * (P_left + P_right + P_bottom + P_top - Divergence)
                float newPressure = (L + R + B + T - div) * 0.25;
                
                gl_FragColor = vec4(newPressure, 0.0, 0.0, 1.0);
            }
        `;

      // Shader pour forcer les conditions aux limites (no-slip) sur le champ de vitesse
      const boundaryShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_velocity;
            uniform vec2 u_texelSize;

            void main() {
                vec2 vel = texture2D(u_velocity, v_texCoord).xy;

                // Si le fragment est sur une bordure, sa vitesse est forcée à zéro.
                if (v_texCoord.x < u_texelSize.x || v_texCoord.x > 1.0 - u_texelSize.x ||
                    v_texCoord.y < u_texelSize.y || v_texCoord.y > 1.0 - u_texelSize.y) {
                    vel = vec2(0.0, 0.0);
                }
                
                gl_FragColor = vec4(vel, 0.0, 1.0);
            }
        `;

      // Shader pour soustraire le gradient de pression du champ de vitesse
      const gradientSubtractShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_pressure;
            uniform sampler2D u_velocity;
            uniform vec2 u_texelSize;

            void main() {
                // Calcule le gradient de pression en utilisant les différences centrales
                float L = texture2D(u_pressure, v_texCoord - vec2(u_texelSize.x, 0.0)).r;
                float R = texture2D(u_pressure, v_texCoord + vec2(u_texelSize.x, 0.0)).r;
                float B = texture2D(u_pressure, v_texCoord - vec2(0.0, u_texelSize.y)).r;
                float T = texture2D(u_pressure, v_texCoord + vec2(0.0, u_texelSize.y)).r;
                
                // Le gradient de pression est un vecteur (dP/dx, dP/dy)
                vec2 gradient = 0.5 * vec2(R - L, T - B);
                vec2 velocity = texture2D(u_velocity, v_texCoord).xy;
                
                // Soustrait le gradient de pression du champ de vitesse pour rendre le champ sans divergence
                vec2 new_velocity = velocity - gradient;

                // --- Conditions aux limites "No-Slip" ---
                // Si le fragment se trouve sur l'une des 4 bordures, on force sa vitesse à (0,0).
                if (v_texCoord.x < u_texelSize.x || v_texCoord.x > 1.0 - u_texelSize.x ||
                    v_texCoord.y < u_texelSize.y || v_texCoord.y > 1.0 - u_texelSize.y) {
                    new_velocity = vec2(0.0, 0.0);
                }

                gl_FragColor = vec4(new_velocity, 0.0, 1.0);
            }
        `;

      // Nouveau shader pour la diffusion thermique
      const diffusionShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_source;
            uniform vec2 u_texelSize;
            uniform float u_dt;
            uniform float u_diffusionCoefficient;

            void main() {
                // Échantillonne la température actuelle au centre et chez les voisins
                float C = texture2D(u_source, v_texCoord).r; // Centre
                float L = texture2D(u_source, v_texCoord - vec2(u_texelSize.x, 0.0)).r; // Gauche
                float R = texture2D(u_source, v_texCoord + vec2(u_texelSize.x, 0.0)).r; // Droite
                float B = texture2D(u_source, v_texCoord - vec2(0.0, u_texelSize.y)).r; // Bas
                float T = texture2D(u_source, v_texCoord + vec2(0.0, u_texelSize.y)).r; // Haut

                // Calcule le Laplacien (approximation par différences finies)
                float laplacian = (L + R + B + T - 4.0 * C);

                // Applique la diffusion: T_new = T_old + dt * D * ∇²T
                float newTemp = C + u_dt * u_diffusionCoefficient * laplacian / (u_texelSize.x * u_texelSize.x);
                
                // Conditions aux limites spécifiques pour la température : les bords supérieur et inférieur sont fixes.
                if (v_texCoord.y < u_texelSize.y || v_texCoord.y > (1.0 - u_texelSize.y)) {
                    gl_FragColor = texture2D(u_source, v_texCoord); // Ne pas appliquer la diffusion sur les bords
                } else {
                    gl_FragColor = vec4(newTemp, 0.0, 0.0, 1.0);
                }
            }
        `;

      // Shader pour ajouter un point chaud lors d'un clic
      const addHeatShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_source;
            uniform vec2 u_clickPosition; // Position normalisée (0-1)
            uniform float u_radius;
            uniform float u_intensity;

            void main() {
                float currentTemp = texture2D(u_source, v_texCoord).r;
                float dist = distance(v_texCoord, u_clickPosition);
                
                // Utilise smoothstep pour un bel effet de dégradé
                float heat = u_intensity * smoothstep(u_radius, 0.0, dist);
                
                float newTemp = currentTemp + heat;
                
                // On s'assure que la température ne devienne pas excessive
                gl_FragColor = vec4(clamp(newTemp, 0.0, 10.0), 0.0, 0.0, 1.0);
            }
        `;

      // Shader pour visualiser soit la température, soit la vitesse
      const visualizeShaderSource = `
            precision highp float;
            varying vec2 v_texCoord;
            uniform sampler2D u_temperatureSource; // Pour la texture de température
            uniform sampler2D u_velocitySource;    // Pour la texture de vitesse
            uniform int u_visualizationMode;       // 0 pour température, 1 pour magnitude de la vitesse

            // Colormap pour la température (bleu -> rouge)
            vec3 colormapTemp(float t) {
                t = clamp(t, 0.0, 1.0);
                return vec3(t, 0.1, 1.0 - t); // Le canal vert est faible pour un effet plus pur bleu/rouge
            }

            // Colormap pour la vitesse (noir -> jaune/orange)
            vec3 colormapSpeed(float s) {
                s = clamp(s, 0.0, 1.0); // Clamp la valeur de vitesse normalisée entre 0.0 et 1.0
                // Un dégradé simple pour la vitesse : du noir au jaune-orangé
                // Note: Le diviseur 5.0 est une estimation pour normaliser la vitesse.
                // Si la simulation génère des vitesses très différentes, cette valeur pourrait être ajustée.
                return vec3(s, s * 0.8, 0.0); // Jaunâtre pour des vitesses plus élevées
            }

            void main() {
                vec4 finalColor;
                if (u_visualizationMode == 0) {
                    // Visualiser la température
                    float temperature = texture2D(u_temperatureSource, v_texCoord).r;
                    finalColor = vec4(colormapTemp(temperature), 1.0);
                } else if (u_visualizationMode == 1) {
                    // Visualiser la magnitude de la vitesse (vitesse scalaire)
                    vec2 velocity = texture2D(u_velocitySource, v_texCoord).xy;
                    float speed = length(velocity); // Calculer la magnitude (vitesse)
                    // Normaliser la vitesse pour la colormap (diviser par une valeur max attendue)
                    float normalizedSpeed = speed / 5.0; // Ajustez 5.0 si les vitesses sont plus élevées/basses
                    finalColor = vec4(colormapSpeed(normalizedSpeed), 1.0);
                } else {
                    // Mode inconnu, afficher du noir
                    finalColor = vec4(0.0, 0.0, 0.0, 1.0);
                }
                gl_FragColor = finalColor;
            }
        `;

      // --- Point d'entrée ---
      window.onload = function () {
        main();
      };

      function showStatusMessage(message, isError = true) {
        const statusDiv = document.getElementById("statusMessage");
        statusDiv.textContent = message;
        statusDiv.classList.remove("hidden");
        if (isError) {
          statusDiv.classList.add("error-message");
        } else {
          statusDiv.classList.remove("error-message");
          statusDiv.style.backgroundColor = "#e8f5e9";
          statusDiv.style.borderColor = "#a5d6a7";
          statusDiv.style.color = "#2e7d32";
        }
      }

      function main() {
        const canvas = document.getElementById("glcanvas");
        const statusMessage = document.getElementById("statusMessage");
        const gl = canvas.getContext("webgl");

        if (!gl) {
          showStatusMessage(
            "Erreur : WebGL n'est pas supporté par votre navigateur."
          );
          return;
        }

        // Activer les extensions nécessaires pour les textures flottantes
        const ext = gl.getExtension("OES_texture_float");
        if (!ext) {
          showStatusMessage(
            "Erreur : L'extension OES_texture_float n'est pas supportée. Textures flottantes requises pour la simulation."
          );
          return;
        }

        // Pour s'assurer que le canvas est toujours carré et prend la place disponible
        function resizeCanvas() {
          const container = canvas.parentElement;
          const size = Math.min(
            container.offsetWidth,
            container.offsetHeight * 0.8
          ); // Ajustez si nécessaire
          canvas.width = size;
          canvas.height = size;
        }
        window.addEventListener("resize", resizeCanvas);
        resizeCanvas(); // Appel initial

        // Création des programmes de shaders
        const advectionProgram = createProgram(
          gl,
          vertexShaderSource,
          advectionShaderSource
        );
        const buoyancyProgram = createProgram(
          gl,
          vertexShaderSource,
          buoyancyShaderSource
        );
        const divergenceProgram = createProgram(
          gl,
          vertexShaderSource,
          divergenceShaderSource
        );
        const pressureProgram = createProgram(
          gl,
          vertexShaderSource,
          pressureShaderSource
        );
        const boundaryProgram = createProgram(
          gl,
          vertexShaderSource,
          boundaryShaderSource
        );
        const gradientSubtractProgram = createProgram(
          gl,
          vertexShaderSource,
          gradientSubtractShaderSource
        );
        const diffusionProgram = createProgram(
          gl,
          vertexShaderSource,
          diffusionShaderSource
        );
        const visualizeProgram = createProgram(
          gl,
          vertexShaderSource,
          visualizeShaderSource
        );
        const addHeatProgram = createProgram(
          gl,
          vertexShaderSource,
          addHeatShaderSource
        );

        // Écouteur d'événement pour le clic de souris sur le canvas
        canvas.addEventListener("mousedown", (e) => {
          const rect = canvas.getBoundingClientRect();
          const x = (e.clientX - rect.left) / canvas.clientWidth;
          // On inverse l'axe Y pour correspondre aux coordonnées de texture de WebGL
          const y = 1.0 - (e.clientY - rect.top) / canvas.clientHeight;

          clickRequest = {
            position: [x, y],
            radius: 0.05, // Rayon du point chaud (en coordonnées normalisées)
            intensity: 8.0, // Intensité de la chaleur ajoutée
          };
          console.log("Clic détecté, ajout d'un point chaud en", x, y);
        });

        // Un simple quad qui remplit l'écran
        const quadBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
        gl.bufferData(
          gl.ARRAY_BUFFER,
          new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]),
          gl.STATIC_DRAW
        );

        // La taille d'un texel en coordonnées normalisées (0.0 à 1.0)
        const texelSize = {
          x: 1.0 / config.SIM_RESOLUTION,
          y: 1.0 / config.SIM_RESOLUTION,
        };

        // Création des textures et Framebuffers (FBOs) pour la simulation
        // On utilise une technique de "ping-pong" avec deux textures/FBOs pour chaque champ
        let velocity = createDoubleFBO(
          gl,
          config.SIM_RESOLUTION,
          config.SIM_RESOLUTION,
          null
        );
        let temperature = createDoubleFBO(
          gl,
          config.SIM_RESOLUTION,
          config.SIM_RESOLUTION,
          getInitialTemperature()
        );
        let pressure = createDoubleFBO(
          gl,
          config.SIM_RESOLUTION,
          config.SIM_RESOLUTION,
          null
        );
        const divergence = createFBO(
          gl,
          config.SIM_RESOLUTION,
          config.SIM_RESOLUTION,
          null
        );

        function getInitialTemperature() {
          // Créer un tableau Float32Array pour les données de température
          // Chaque texel aura 4 composants (RGBA), mais seule la composante R est utilisée pour la température.
          const data = new Float32Array(
            config.SIM_RESOLUTION * config.SIM_RESOLUTION * 4
          );
          const avgTemp =
            (config.INITIAL_TEMP_BOTTOM + config.INITIAL_TEMP_TOP) / 2.0;

          for (let j = 0; j < config.SIM_RESOLUTION; j++) {
            for (let i = 0; i < config.SIM_RESOLUTION; i++) {
              const index = (j * config.SIM_RESOLUTION + i) * 4;
              let temp;

              // --- Conditions aux limites (les "plaques") ---
              if (j === 0) {
                // Bordure du bas : toujours chaude
                temp = config.INITIAL_TEMP_BOTTOM;
              } else if (j === config.SIM_RESOLUTION - 1) {
                // Bordure du haut : toujours froide
                temp = config.INITIAL_TEMP_TOP;
              } else {
                // --- Condition initiale du fluide à l'intérieur ---
                // Température moyenne homogène avec un bruit aléatoire pour briser la symétrie.
                // Ce bruit est crucial pour que les instabilités se développent et forment les cellules de convection.
                const noise = (Math.random() - 0.5) * 0.01; // Bruit pour perturber l'équilibre
                temp = avgTemp + noise;
              }

              data[index] = temp; // R (contient la température)
              data[index + 1] = 0.0; // G (non utilisé)
              data[index + 2] = 0.0; // B (non utilisé)
              data[index + 3] = 1.0; // A (alpha, toujours 1.0)
            }
          }
          return data;
        }

        function update() {
          // Le viewport pour le rendu interne (sur les FBOs) est toujours à la résolution de la simulation
          gl.viewport(0, 0, config.SIM_RESOLUTION, config.SIM_RESOLUTION);

          // --- Étape 1: Advection de la vitesse ---
          // Déplace le champ de vitesse actuel en fonction de lui-même (auto-advection).
          gl.useProgram(advectionProgram);
          gl.uniform2f(
            gl.getUniformLocation(advectionProgram, "u_texelSize"),
            texelSize.x,
            texelSize.y
          );
          gl.uniform1f(
            gl.getUniformLocation(advectionProgram, "u_dt"),
            config.DT
          );
          gl.uniform1f(
            gl.getUniformLocation(advectionProgram, "u_simResolution"),
            config.SIM_RESOLUTION
          );
          gl.uniform1i(
            gl.getUniformLocation(advectionProgram, "u_velocity"),
            0
          );
          gl.uniform1i(gl.getUniformLocation(advectionProgram, "u_source"), 0);
          bindFBO(gl, velocity.write.fbo, quadBuffer, advectionProgram);
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, velocity.read.texture);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          velocity.swap();

          // --- Étape 2: Advection de la température ---
          // Déplace le champ de température actuel en fonction du champ de vitesse.
          gl.uniform1i(gl.getUniformLocation(advectionProgram, "u_source"), 1);
          bindFBO(gl, temperature.write.fbo, quadBuffer, advectionProgram);
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, velocity.read.texture);
          gl.activeTexture(gl.TEXTURE1);
          gl.bindTexture(gl.TEXTURE_2D, temperature.read.texture);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          temperature.swap();

          // --- Étape 3: Application de la flottabilité (Buoyancy) ---
          // Ajoute une force verticale à la vitesse en fonction de la température.
          gl.useProgram(buoyancyProgram);
          gl.uniform1f(
            gl.getUniformLocation(buoyancyProgram, "u_dt"),
            config.DT
          );
          gl.uniform1f(
            gl.getUniformLocation(buoyancyProgram, "u_alpha"),
            config.ALPHA
          );
          gl.uniform1i(gl.getUniformLocation(buoyancyProgram, "u_velocity"), 0);
          gl.uniform1i(
            gl.getUniformLocation(buoyancyProgram, "u_temperature"),
            1
          );
          bindFBO(gl, velocity.write.fbo, quadBuffer, buoyancyProgram);
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, velocity.read.texture);
          gl.activeTexture(gl.TEXTURE1);
          gl.bindTexture(gl.TEXTURE_2D, temperature.read.texture);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          velocity.swap();

          // --- Étape 3.2: Application des conditions aux limites (NOUVEAU) ---
          // On s'assure que la vitesse est nulle aux parois AVANT de calculer la divergence
          // C'est l'étape clé pour une bonne conservation de la masse.
          gl.useProgram(boundaryProgram);
          gl.uniform2f(
            gl.getUniformLocation(boundaryProgram, "u_texelSize"),
            texelSize.x,
            texelSize.y
          );
          gl.uniform1i(gl.getUniformLocation(boundaryProgram, "u_velocity"), 0);
          bindFBO(gl, velocity.write.fbo, quadBuffer, boundaryProgram);
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, velocity.read.texture);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          velocity.swap();

          // --- Étape 3.5: Diffusion de la température (NOUVEAU) ---
          gl.useProgram(diffusionProgram);
          gl.uniform2f(
            gl.getUniformLocation(diffusionProgram, "u_texelSize"),
            texelSize.x,
            texelSize.y
          );
          gl.uniform1f(
            gl.getUniformLocation(diffusionProgram, "u_dt"),
            config.DT
          );
          gl.uniform1f(
            gl.getUniformLocation(diffusionProgram, "u_diffusionCoefficient"),
            config.DIFFUSION_TEMP
          );
          gl.uniform1i(gl.getUniformLocation(diffusionProgram, "u_source"), 0);
          bindFBO(gl, temperature.write.fbo, quadBuffer, diffusionProgram);
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, temperature.read.texture);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          temperature.swap();

          // --- Étape 3.7: Ajout de chaleur par clic (NOUVEAU) ---
          if (clickRequest) {
            gl.useProgram(addHeatProgram);
            gl.uniform2fv(
              gl.getUniformLocation(addHeatProgram, "u_clickPosition"),
              clickRequest.position
            );
            gl.uniform1f(
              gl.getUniformLocation(addHeatProgram, "u_radius"),
              clickRequest.radius
            );
            gl.uniform1f(
              gl.getUniformLocation(addHeatProgram, "u_intensity"),
              clickRequest.intensity
            );
            gl.uniform1i(gl.getUniformLocation(addHeatProgram, "u_source"), 0);

            bindFBO(gl, temperature.write.fbo, quadBuffer, addHeatProgram);
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, temperature.read.texture);
            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
            temperature.swap();

            clickRequest = null; // On consomme la demande de clic
          }

          // --- Étape 4: Calcul de la divergence ---
          gl.useProgram(divergenceProgram);
          gl.uniform2f(
            gl.getUniformLocation(divergenceProgram, "u_texelSize"),
            texelSize.x,
            texelSize.y
          );
          gl.uniform1i(
            gl.getUniformLocation(divergenceProgram, "u_velocity"),
            0
          );
          bindFBO(gl, divergence.fbo, quadBuffer, divergenceProgram);
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, velocity.read.texture);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

          // --- Étape 5: Résolution de la pression (itérations de Jacobi) ---
          gl.useProgram(pressureProgram);
          gl.uniform2f(
            gl.getUniformLocation(pressureProgram, "u_texelSize"),
            texelSize.x,
            texelSize.y
          );
          gl.uniform1i(
            gl.getUniformLocation(pressureProgram, "u_divergence"),
            1
          );
          gl.uniform1i(gl.getUniformLocation(pressureProgram, "u_pressure"), 0);
          gl.activeTexture(gl.TEXTURE1);
          gl.bindTexture(gl.TEXTURE_2D, divergence.texture);

          for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {
            bindFBO(gl, pressure.write.fbo, quadBuffer, pressureProgram);
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, pressure.read.texture);
            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
            pressure.swap();
          }

          // --- Étape 6: Soustraction du gradient de pression ---
          gl.useProgram(gradientSubtractProgram);
          gl.uniform2f(
            gl.getUniformLocation(gradientSubtractProgram, "u_texelSize"),
            texelSize.x,
            texelSize.y
          );
          gl.uniform1i(
            gl.getUniformLocation(gradientSubtractProgram, "u_pressure"),
            0
          );
          gl.uniform1i(
            gl.getUniformLocation(gradientSubtractProgram, "u_velocity"),
            1
          );
          bindFBO(gl, velocity.write.fbo, quadBuffer, gradientSubtractProgram);
          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, pressure.read.texture);
          gl.activeTexture(gl.TEXTURE1);
          gl.bindTexture(gl.TEXTURE_2D, velocity.read.texture);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          velocity.swap();

          // --- Étape 7: Visualisation du résultat à l'écran ---
          gl.useProgram(visualizeProgram);
          gl.uniform1i(
            gl.getUniformLocation(visualizeProgram, "u_temperatureSource"),
            0
          );
          gl.uniform1i(
            gl.getUniformLocation(visualizeProgram, "u_velocitySource"),
            1
          );
          gl.uniform1i(
            gl.getUniformLocation(visualizeProgram, "u_visualizationMode"),
            currentVisualizationMode
          );

          bindFBO(gl, null, quadBuffer, visualizeProgram);
          gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

          gl.activeTexture(gl.TEXTURE0);
          gl.bindTexture(gl.TEXTURE_2D, temperature.read.texture);
          gl.activeTexture(gl.TEXTURE1);
          gl.bindTexture(gl.TEXTURE_2D, velocity.read.texture);

          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

          requestAnimationFrame(update);
        }

        // Lancement de la boucle de simulation
        update();

        // Ajout des écouteurs d'événements pour les boutons de visualisation
        document.getElementById("showTempBtn").addEventListener("click", () => {
          currentVisualizationMode = 0;
          console.log("Mode de visualisation: Température");
        });

        document
          .getElementById("showSpeedBtn")
          .addEventListener("click", () => {
            currentVisualizationMode = 1;
            console.log("Mode de visualisation: Vitesse");
          });
      }

      // --- Fonctions utilitaires WebGL ---

      function createProgram(gl, vertexSource, fragmentSource) {
        const program = gl.createProgram();
        const vShader = compileShader(gl, gl.VERTEX_SHADER, vertexSource);
        const fShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSource);
        gl.attachShader(program, vShader);
        gl.attachShader(program, fShader);
        gl.linkProgram(program);
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          const info = gl.getProgramInfoLog(program);
          console.error("Erreur de liaison du programme:", info);
          showStatusMessage(
            "Erreur de liaison du programme WebGL. Voir la console pour plus de détails."
          );
          gl.deleteProgram(program);
          return null;
        }
        return program;
      }

      function compileShader(gl, type, source) {
        const shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
          const info = gl.getShaderInfoLog(shader);
          console.error(
            `Erreur de compilation du shader ${
              type === gl.VERTEX_SHADER ? "vertex" : "fragment"
            }:`,
            info
          );
          showStatusMessage(
            `Erreur de compilation du shader ${
              type === gl.VERTEX_SHADER ? "vertex" : "fragment"
            }. Voir la console pour plus de détails.`
          );
          gl.deleteShader(shader);
          return null;
        }
        return shader;
      }

      function createFBO(gl, width, height, data) {
        const fbo = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        const texture = createTexture(gl, width, height, data);
        gl.framebufferTexture2D(
          gl.FRAMEBUFFER,
          gl.COLOR_ATTACHMENT0,
          gl.TEXTURE_2D,
          texture,
          0
        );
        if (
          gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE
        ) {
          console.error("Erreur de framebuffer: Statut incomplet.");
          showStatusMessage(
            "Erreur : Framebuffer WebGL incomplet. Le GPU pourrait ne pas supporter ce format de texture."
          );
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        return { fbo, texture };
      }

      function createDoubleFBO(gl, width, height, data) {
        let fbo1 = createFBO(gl, width, height, data);
        let fbo2 = createFBO(gl, width, height, null);
        return {
          read: fbo1,
          write: fbo2,
          swap: function () {
            let temp = this.read;
            this.read = this.write;
            this.write = temp;
          },
        };
      }

      function createTexture(gl, width, height, data) {
        const texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texImage2D(
          gl.TEXTURE_2D,
          0,
          gl.RGBA,
          width,
          height,
          0,
          gl.RGBA,
          gl.FLOAT,
          data
        );
        return texture;
      }

      function bindFBO(gl, fbo, quadBuffer, program) {
        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
        const positionLocation = gl.getAttribLocation(program, "a_position");
        gl.enableVertexAttribArray(positionLocation);
        gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
      }
    </script>
  </body>
</html>
